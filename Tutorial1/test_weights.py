import numpy as np
from Simulation import Simulation

env_range = 20

pos = np.array([-6,-6])
# Defin robot radius, sensor range, 1/dT for how many times to render simulation within one loop of robot controller
robot_rad = 1
sens_range = 3
dT = 0.1
np.random.seed(5)
iter_sim = 1000
#Define datetime of directory with saved weights
datetime = '1520520627'

sim = Simulation(iter_sim, env_range, pos, robot_rad, sens_range, dT, None,graphics = True)

def tokenizer(fname):
    with open(fname) as f:
            weights= []
            for line in f:
                    if 'end_layer' in line:
                            yield weights                            
                            weights = []
                            continue
                    weights.append(line)
                    
# weights = np.array([np.loadtxt(A,delimiter=',') for A in tokenizer('./output/'+datetime+'/weights.txt')])
weights = np.array([ np.array([[ 0.25835748,  2.14131822, -2.76809211, -1.142343  , -2.99715637,
 2.56976623, -2.44665046, -0.26286114,  2.07793873,  2.68164526],
[-0.16536204, -0.74050726, -2.59570523, -2.19252557, -1.99343475,
 0.4921999 , -0.41124782,  0.84437726,  1.14592309,  0.14420558],
[ 1.83744794, -1.86560885,  0.11871563,  0.25811556,  1.91818413,
-0.03402292, -0.49391986,  2.19770205, -0.46020801, -0.4312115 ],
[-2.94067215, -2.75355135,  0.90782677, -1.19456526,  0.74951258,
-3.20137002, -0.28471721,  2.39233382,  1.56039535,  1.26420719],
[-1.72155038,  1.12900269,  3.09154883,  1.89477366,  2.55948641,
 1.04702082, -2.43978644,  0.78946633, -1.62139061,  1.77891872],
[-0.82232404, -1.81766604,  0.20202182, -0.65808251,  2.25887591,
-0.33862811, -1.65225517,  2.0065789 ,  0.56641532, -2.54700373],
[-0.19717115,  1.25550823, -0.28921046,  3.55356645,  2.01308664,
-0.11710632, -1.11830668,  3.2142429 ,  0.97766818, -3.29174583],
[ 0.95712577, -0.07136011, -1.39303482, -1.12117803, -1.45596294,
 1.54620274,  1.52065757,  0.25698109,  2.62377143,  1.46350008],
[ 2.60875106,  1.21377335,  2.94965923,  0.18387831,  1.59706725,
-1.82937356, -2.01763995, -0.83953707, -0.84941037,  0.55143983],
[ 0.56363049,  3.25665255, -0.18057159, -0.84644329,  1.88147636,
 0.66872771, -1.26265044, -3.42586521,  0.31924556,  1.27815163],
[ 3.4570954 , -4.50094659,  0.40588095,  2.15546822, -1.35702118,
 0.79389118, -1.41238793,  2.1393049 , -2.08002231,  3.61038887],
[ 3.32775601,  1.29369048,  2.47344059, -1.60299171,  2.37504428,
 1.19194638,  0.37516871, -3.99786563,  0.49425077,  1.00736985],
[-2.56338867,  2.3671621 , -0.94575337,  0.1757962 ,  3.64449893,
 3.09118153,  0.80770357,  2.21564019,  0.0279723 , -2.79863956],
[-1.43494005, -0.23589899,  3.35354424, -2.25040382,  1.25509474,
 2.09537005,  0.09892914, -2.01159943,  3.08144551, -3.12058979],
[-0.71754178,  2.16276434, -1.49446231, -2.75331285,  0.84204781,
 0.96584777, -0.42634335, -1.19132417, -2.51314528, -3.67438807]]),
np.array([[ 2.55698507, -2.91724325],
[-1.35474212, -1.10892014],
[-0.72495899, -1.86262662],
[ 4.04216697,  1.55709301],
[-0.59275827,  1.84210485],
[-3.30020275,  0.50825348],
[ 3.31815249, -1.11248411],
[-2.82265401,  0.29945132],
[ 0.84248852, -2.85742274],
[ 0.71877299, -2.29660861]])])
sim.simulate(weights)